{"version":3,"sources":["components/SearchBar.js","components/RepoCard.js","components/RepoList.js","components/NoStarRepo.js","components/NameError.js","api/github.js","components/Loading.js","components/Footer.js","components/App.js","registerServiceWorker.js","index.js"],"names":["SearchBar","props","useState","name","setName","className","onSubmit","event","preventDefault","type","autoFocus","value","onChange","e","target","readOnly","RepoCard","repo","html_url","description","owner","language","stargazers_count","href","rel","login","RepoList","repos","map","key","id","NoStarRepo","NameError","axios","create","baseURL","Loading","Footer","App","state","starred_repos","add_repo_size","http_status","err_msg","page","loading","onSearchSubmit","a","response","setState","github","get","params","per_page","status","data","length","add_response","message","result","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.5483c05e.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport '../css/SearchBar.css'\n\nconst SearchBar = props => {\n  const [name, setName] = useState(\"\")\n  const onFormSubmit = event => {\n    event.preventDefault()\n    props.onSubmit(name)\n  }\n  return (<div className=\"ui segment\">\n    <form onSubmit={onFormSubmit} className=\"ui form\">\n      <div className=\"field\">\n        <h1>Enter GitHub username</h1>\n        <input type=\"text\" autoFocus=\"autoFocus\" value={name} onChange={e => setName(e.target.value)} readOnly={props.readOnly}/>\n      </div>\n    </form>\n  </div>)\n}\n\nexport default SearchBar\n","import React from 'react'\nimport '../css/RepoCard.css'\n\nconst RepoCard = props => {\n  const {\n    name,\n    html_url,\n    description,\n    owner,\n    language,\n    stargazers_count,\n  } = props.repo\n  return (\n    <div className=\"card\">\n      <div className=\"content\">\n        <div className=\"ui header\">\n          <a href={html_url} target=\"_blank\" rel=\"noreferrer noopener\">\n            {name}\n          </a>\n        </div>\n        <div className=\"ui meta grid\">\n          <div className=\"ui equal width row\">\n            <div className=\"column\">{owner.login} </div>\n            <div className=\"column\">{language} </div>\n            <div className=\"column\">&#9733;{stargazers_count} </div>\n          </div>\n        </div>\n        <div className=\"ui description\">{description}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default RepoCard\n","import React from 'react'\nimport RepoCard from './RepoCard'\n\nconst RepoList = props => {\n  const repos = props.repos.map(repo => {\n    return <RepoCard key={repo.id} repo={repo} />\n  })\n  return <div className=\"ui container centered cards\">{repos}</div>\n}\n\nexport default RepoList\n","import React from 'react'\nimport '../css/NoStarRepo.css'\n\nconst NoStarRepo = props => {\n  return (\n    < div className = \"ui container NoStarRepo\" >\n      <h2> <span className=\"name\">{props.name}</span> has no starred repository</h2>\n    </div>\n  )\n}\n\nexport default NoStarRepo\n","import React from 'react'\nimport '../css/NameError.css'\n\nconst NameError = props => {\n  return (\n    <div className=\"ui container nameError\">\n      <h2>\n        Can't find user <span className=\"name\">{props.name}</span>.\n        Check spelling.\n      </h2> \n    </div>\n  )\n}\n\nexport default NameError\n","import axios from 'axios'\n\nexport default axios.create({\n  baseURL: \"https://api.github.com/\",\n})\n","import React from 'react'\nimport '../css/Loading.css'\n\nconst Loading = props => {\n  return (<div className=\"ui loading\">\n    <div className=\"ui active inverted dimmer\">\n      <div className=\"ui large text loader\">Loading</div>\n    </div>\n    <p></p>\n  </div>)\n}\n\nexport default Loading\n","import React from 'react'\nimport '../css/Footer.css'\n\nconst Footer = () => {\n  return (\n    <div>\n      <footer>GitHub Star Sign is built with <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer\">React</a> . \n            Source is on <a href=\"https://github.com/hyuraku/github-star-signs\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>.</footer>\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react'\nimport SearchBar from './SearchBar'\nimport RepoList from './RepoList'\nimport NoStarRepo from './NoStarRepo'\nimport NameError from './NameError'\nimport github from '../api/github'\nimport Loading from './Loading'\nimport Footer from './Footer'\n\nconst max_repo_size = 90\nclass App extends React.Component {\n  state = {\n    starred_repos: [],\n    add_repo_size: 0,\n    name: '',\n    http_status: 200,\n    err_msg: '',\n    page: 1,\n    loading: false\n  }\n\n  onSearchSubmit = async name => {\n    let response = ''\n    try {\n      this.setState({page: 1, loading: true})\n      response = await github.get(`/users/${name}/starred`,{\n        params: {\n          per_page: max_repo_size,\n          page: 1\n        }\n      });\n      this.setState({\n        name: name,\n        http_status: response.status,\n        starred_repos: response.data,\n        page: this.state.page + 1,\n        err_msg: '',\n        add_repo_size: response.data.length,\n      })\n      while (this.state.add_repo_size === max_repo_size) {\n        let add_response = await github.get(`/users/${name}/starred`, {\n          params: {\n            per_page: max_repo_size,\n            page: this.state.page,\n          },\n        })\n        this.setState({\n          starred_repos: [...this.state.starred_repos, ...add_response.data],\n          page: this.state.page + 1,\n          add_repo_size: add_response.data.length,\n        })\n      }\n      this.setState({loading: false})\n    } catch (error) {\n      this.setState({\n        name: name,\n        http_status: error.response.status,\n        err_msg: error.response.message,\n        loading: false\n      })\n    }\n  }\n\n  render() {\n    let result = ''\n    if (this.state.loading === true) {\n      result = <Loading/>\n    } else {\n      if (this.state.name !== '') {\n        if (this.state.http_status === 200) {\n          if (this.state.starred_repos.length === 0) {\n            result = <NoStarRepo name={this.state.name} />\n          } else {\n            result = <RepoList repos={this.state.starred_repos} />\n          }\n        } else {\n          result = <NameError name={this.state.name} />\n        }\n      }\n    }\n    return (\n      <div>\n        <SearchBar onSubmit={this.onSearchSubmit} readOnly={this.state.loading}/>\n        {result}\n        <Footer/>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}
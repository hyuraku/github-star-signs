{"version":3,"sources":["components/SearchBar.tsx","api/github.tsx","components/RepoCard.tsx","components/RepoList.tsx","components/NoStarRepo.tsx","components/NameError.tsx","components/Loading.tsx","components/NoContent.tsx","components/MainContent.tsx","components/Footer.tsx","components/App.tsx","registerServiceWorker.js","index.tsx"],"names":["SearchBar","React","memo","props","useState","name","setName","className","onSubmit","event","preventDefault","type","autoFocus","value","onChange","e","target","readOnly","placeholder","displayName","github","axios","create","baseURL","RepoCard","repo","html_url","description","owner","language","stargazers_count","href","rel","login","RepoList","repos","map","key","id","NoStarRepo","NameError","Loading","NoContent","MainContent","loading","httpStatus","starredRepos","length","Footer","Link","url","maxRepoSize","App","state","addRepoSize","errMsg","page","onSearchSubmit","a","response","setState","get","params","per_page","status","data","add_response","message","this","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.7ea2d2b3.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport '../css/SearchBar.css'\n\ninterface Props {\n  onSubmit: (arg0: string) => void\n  readOnly: boolean\n}\n\nexport const SearchBar: React.FC<Props> = React.memo((props) => {\n  const [name, setName] = useState('')\n  const onFormSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault()\n    props.onSubmit(name)\n  }\n  return (\n    <div className=\"ui segment\">\n      <form onSubmit={onFormSubmit} className=\"ui form\">\n        <div className=\"field\">\n          <h1>Enter GitHub username</h1>\n          <label>\n            <input\n              type=\"text\"\n              autoFocus\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              readOnly={props.readOnly}\n              placeholder=\"Your GitHub username\"\n            />\n          </label>\n        </div>\n      </form>\n    </div>\n  )\n})\n\nSearchBar.displayName = \"SearchBar\"\n","import axios from 'axios'\n\nexport const github = axios.create({\n  baseURL: 'https://api.github.com/',\n})\n","import React from 'react'\nimport '../css/RepoCard.css'\n\ninterface Props {\n  repo: {\n    name: string\n    html_url: string\n    description: string\n    owner: {\n      login: string\n    }\n    language: string\n    stargazers_count: number\n  }\n}\n\nexport const RepoCard: React.FC<Props> = (props) => {\n  const {\n    name,\n    html_url,\n    description,\n    owner,\n    language,\n    stargazers_count,\n  } = props.repo\n  return (\n    <div className=\"card\">\n      <div className=\"content\">\n        <div className=\"ui header\">\n          <a href={html_url} target=\"_blank\" rel=\"noreferrer noopener\">\n            {name}\n          </a>\n        </div>\n        <div className=\"ui meta grid\">\n          <div className=\"ui equal width row\">\n            <div className=\"column\">{owner.login} </div>\n            <div className=\"column\">{language} </div>\n            <div className=\"column\">&#9733;{stargazers_count} </div>\n          </div>\n        </div>\n        <div className=\"ui description\">{description}</div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RepoCard } from './RepoCard'\n\ninterface Props {\n  repos: Array<RepoCard>\n}\n\n// eslint-disable-next-line\ninterface RepoCard {\n  id: string\n  name: string\n  html_url: string\n  description: string\n  owner: {\n    login: string\n  }\n  language: string\n  stargazers_count: number\n}\n\nexport const RepoList: React.FC<Props> = (props) => {\n  const repos = props.repos.map((repo: RepoCard) => {\n    return <RepoCard key={repo.id} repo={repo} />\n  })\n  return <div className=\"ui container cards\">{repos}</div>\n}\n","import React from 'react'\nimport '../css/NoStarRepo.css'\n\ninterface Props {\n  name: string\n}\n\nexport const NoStarRepo: React.FC<Props> = ({ name }) => {\n  return (\n    <div className=\"ui container NoStarRepo\">\n      <h2>\n        {' '}\n        <span className=\"name\">{name}</span> has no starred repository\n      </h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport '../css/NameError.css'\n\ninterface Props {\n  name: string\n}\n\nexport const NameError: React.FC<Props> = ({ name }) => {\n  return (\n    <div className=\"ui container nameError\">\n      <h2>\n        Can't find user <span className=\"name\">{name}</span>. Check spelling.\n      </h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport '../css/Loading.css'\n\nexport const Loading = () => {\n  return (\n    <div className=\"ui loading\">\n      <div className=\"ui active inverted dimmer\">\n        <div className=\"ui large text loader\">Loading</div>\n      </div>\n      <p></p>\n    </div>\n  )\n}\n","import React from 'react'\n\nexport const NoContent: React.FC = () => {\n  return <div></div>\n}\n","import React from 'react'\nimport { RepoList } from './RepoList'\nimport { NoStarRepo } from './NoStarRepo'\nimport { NameError } from './NameError'\nimport { Loading } from './Loading'\nimport { NoContent } from './NoContent'\n\ninterface Props {\n  loading: boolean,\n  name: string,\n  httpStatus: number,\n  starredRepos: any\n}\n\nexport const MainContent: React.FC<Props> = ({ loading, name, httpStatus, starredRepos }): JSX.Element => {\n  if (loading === true) return <Loading />\n  if (name === '') return <NoContent />\n  if (httpStatus !== 200) return <NameError name={name} />\n  if (starredRepos.length === 0) return <NoStarRepo name={name} />\n  return <RepoList repos={starredRepos} />\n}\n","import React from 'react'\nimport '../css/Footer.css'\n\nexport const Footer = React.memo(() => {\n  return (\n    <footer>\n      GitHub Star Sign is built with{' '}\n      <Link url=\"https://reactjs.org/\" name=\"React\" /> . Source is on{' '}\n      <Link url=\"https://github.com/hyuraku/github-star-signs\" name=\"GitHub\" />.\n    </footer>\n  )\n})\n\nFooter.displayName = \"Footer\"\n\ntype Props = {\n  url: string\n  name: string\n}\n\nconst Link: React.FC<Props> = React.memo(({ url, name }) => {\n  return (\n    <>\n      {/* eslint-disable-next-line */}\n      <a href={url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {name}\n      </a>\n    </>\n  )\n})\n\nLink.displayName = \"Link\"\n","import React from 'react'\nimport { SearchBar } from './SearchBar'\nimport { github } from '../api/github'\nimport { MainContent } from './MainContent'\nimport { Footer } from './Footer'\nimport '../css/Top.css'\n\nconst maxRepoSize = 100\nclass App extends React.Component {\n  state = {\n    starredRepos: [],\n    addRepoSize: 0,\n    name: '',\n    httpStatus: 200,\n    errMsg: '',\n    page: 1,\n    loading: false,\n  }\n\n  onSearchSubmit = async (name: string) => {\n    let response: any = \"\"\n    try {\n      this.setState({\n        page: 1,\n        loading: true,\n      })\n      response = await github.get(`/users/${name}/starred`, {\n        params: {\n          per_page: maxRepoSize,\n          page: 1,\n        },\n      })\n      this.setState({\n        name: name,\n        httpStatus: response.status,\n        starredRepos: response.data,\n        page: this.state.page + 1,\n        errMsg: '',\n        addRepoSize: response.data.length,\n      })\n      while (this.state.addRepoSize === maxRepoSize) {\n        let add_response = await github.get(`/users/${name}/starred`, {\n          params: {\n            per_page: maxRepoSize,\n            page: this.state.page,\n          },\n        })\n        this.setState({\n          starredRepos: [...this.state.starredRepos, ...add_response.data],\n          page: this.state.page + 1,\n          addRepoSize: add_response.data.length,\n        })\n      }\n      this.setState({\n        loading: false,\n      })\n    } catch (error) {\n      this.setState({\n        name: name,\n        httpStatus: error.response.status,\n        errMsg: error.response.message,\n        loading: false,\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"top\">\n        <SearchBar\n          onSubmit={this.onSearchSubmit}\n          readOnly={this.state.loading}\n        />\n        <MainContent\n          loading={this.state.loading}\n          httpStatus={this.state.httpStatus}\n          name={this.state.name}\n          starredRepos={this.state.starredRepos}\n        />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}
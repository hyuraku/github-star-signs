{"version":3,"sources":["components/SearchBar.js","api/github.js","components/RepoCard.js","components/RepoList.js","components/NoStarRepo.js","components/NameError.js","components/Loading.js","components/MainContent.js","components/Footer.js","components/App.js","registerServiceWorker.js","index.js"],"names":["SearchBar","props","useState","name","setName","className","onSubmit","event","preventDefault","type","autoFocus","value","onChange","e","target","readOnly","placeholder","axios","create","baseURL","RepoCard","repo","html_url","description","owner","language","stargazers_count","href","rel","login","RepoList","repos","map","key","id","NoStarRepo","NameError","Loading","MainContent","loading","http_status","starred_repos","length","Footer","url","Link","herf","App","state","add_repo_size","err_msg","page","onSearchSubmit","a","response","setState","github","get","params","per_page","status","data","add_response","message","this","React","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.fb914575.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport '../css/SearchBar.css'\n\nexport const SearchBar = (props) => {\n  const [name, setName] = useState('')\n  const onFormSubmit = (event) => {\n    event.preventDefault()\n    props.onSubmit(name)\n  }\n  return (\n    <div className=\"ui segment\">\n      <form onSubmit={onFormSubmit} className=\"ui form\">\n        <div className=\"field\">\n          <h1>Enter GitHub username</h1>\n          <label>\n            <input\n              type=\"text\"\n              autoFocus=\"autoFocus\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n              readOnly={props.readOnly}\n              placeholder=\"Your GitHub username\"\n            />\n          </label>\n        </div>\n      </form>\n    </div>\n  )\n}\n","import axios from 'axios'\n\nexport default axios.create({\n  baseURL: 'https://api.github.com/',\n})\n","import React from 'react'\nimport '../css/RepoCard.css'\n\nexport const RepoCard = (props) => {\n  const {\n    name,\n    html_url,\n    description,\n    owner,\n    language,\n    stargazers_count,\n  } = props.repo\n  return (\n    <div className=\"card\">\n      <div className=\"content\">\n        <div className=\"ui header\">\n          <a href={html_url} target=\"_blank\" rel=\"noreferrer noopener\">\n            {name}\n          </a>\n        </div>\n        <div className=\"ui meta grid\">\n          <div className=\"ui equal width row\">\n            <div className=\"column\">{owner.login} </div>\n            <div className=\"column\">{language} </div>\n            <div className=\"column\">&#9733;{stargazers_count} </div>\n          </div>\n        </div>\n        <div className=\"ui description\">{description}</div>\n      </div>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RepoCard } from './RepoCard'\n\nexport const RepoList = (props) => {\n  const repos = props.repos.map((repo) => {\n    return <RepoCard key={repo.id} repo={repo} />\n  })\n  return <div className=\"ui container centered cards\">{repos}</div>\n}\n","import React from 'react'\nimport '../css/NoStarRepo.css'\n\nexport const NoStarRepo = (props) => {\n  const { name } = props\n  return (\n    <div className=\"ui container NoStarRepo\">\n      <h2>\n        {' '}\n        <span className=\"name\">{name}</span> has no starred repository\n      </h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport '../css/NameError.css'\n\nexport const NameError = (props) => {\n  const { name } = props\n  return (\n    <div className=\"ui container nameError\">\n      <h2>\n        Can't find user <span className=\"name\">{name}</span>. Check spelling.\n      </h2>\n    </div>\n  )\n}\n","import React from 'react'\nimport '../css/Loading.css'\n\nexport const Loading = () => {\n  return (\n    <div className=\"ui loading\">\n      <div className=\"ui active inverted dimmer\">\n        <div className=\"ui large text loader\">Loading</div>\n      </div>\n      <p></p>\n    </div>\n  )\n}\n","import React from 'react'\nimport { RepoList } from './RepoList'\nimport { NoStarRepo } from './NoStarRepo'\nimport { NameError } from './NameError'\nimport { Loading } from './Loading'\n\nexport const MainContent = (props) => {\n  const { loading, name, http_status, starred_repos } = props\n  if (loading === true) return <Loading />\n  if (name === '') return ''\n  if (http_status !== 200) return <NameError name={name} />\n  if (starred_repos.length === 0) return <NoStarRepo name={name} />\n  return <RepoList repos={starred_repos} />\n}\n","import React from 'react'\nimport '../css/Footer.css'\n\nexport const Footer = () => {\n  return (\n    <footer>\n      GitHub Star Sign is built with{' '}\n      <Link url=\"https://reactjs.org/\" name=\"React\" /> . Source is on{' '}\n      <Link url=\"https://github.com/hyuraku/github-star-signs\" name=\"GitHub\" />.\n    </footer>\n  )\n}\n\nconst Link = (props) => {\n  const { url, name } = props\n  return (\n    <>\n      {/* eslint-disable-next-line */}\n      <a herf={url} target=\"_blank\" rel=\"noopener noreferrer\">\n        {name}\n      </a>\n    </>\n  )\n}\n","import React from 'react'\nimport { SearchBar } from './SearchBar'\nimport github from '../api/github'\nimport { MainContent } from './MainContent'\nimport { Footer } from './Footer'\nimport '../css/Top.css'\n\nconst max_repo_size = 90\nclass App extends React.Component {\n  state = {\n    starred_repos: [],\n    add_repo_size: 0,\n    name: '',\n    http_status: 200,\n    err_msg: '',\n    page: 1,\n    loading: false,\n  }\n\n  onSearchSubmit = async (name) => {\n    let response = ''\n    try {\n      this.setState({\n        page: 1,\n        loading: true,\n      })\n      response = await github.get(`/users/${name}/starred`, {\n        params: {\n          per_page: max_repo_size,\n          page: 1,\n        },\n      })\n      this.setState({\n        name: name,\n        http_status: response.status,\n        starred_repos: response.data,\n        page: this.state.page + 1,\n        err_msg: '',\n        add_repo_size: response.data.length,\n      })\n      while (this.state.add_repo_size === max_repo_size) {\n        let add_response = await github.get(`/users/${name}/starred`, {\n          params: {\n            per_page: max_repo_size,\n            page: this.state.page,\n          },\n        })\n        this.setState({\n          starred_repos: [...this.state.starred_repos, ...add_response.data],\n          page: this.state.page + 1,\n          add_repo_size: add_response.data.length,\n        })\n      }\n      this.setState({\n        loading: false,\n      })\n    } catch (error) {\n      this.setState({\n        name: name,\n        http_status: error.response.status,\n        err_msg: error.response.message,\n        loading: false,\n      })\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"top\">\n        <SearchBar\n          onSubmit={this.onSearchSubmit}\n          readOnly={this.state.loading}\n        />\n        <MainContent\n          loading={this.state.loading}\n          http_status={this.state.http_status}\n          name={this.state.name}\n          starred_repos={this.state.starred_repos}\n        />\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          )\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './components/App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}